<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.company.pingPong.dao.PingPongDao">
	<select id="loginIdDao" parameterType="String" resultType="int">
		SELECT COUNT(id) FROM member WHERE id = #{id}
	</select>
	
	<select id="loginDao" parameterType="java.util.Map" resultType="com.company.pingPong.dto.MemberDto">
		SELECT * FROM member WHERE id = #{id} AND password = #{pwd}
	</select>
	
	<select id="loginPwdDao" parameterType="String" resultType="int">
		SELECT COUNT(password) FROM member WHERE password = #{pwd}
	</select>
	
	<select id="loginNameDao" parameterType="java.util.Map" resultType="String">
		SELECT name FROM member WHERE id = #{id} AND password = #{pwd}
	</select>
	
	<insert id="joinApplyAccountDao" parameterType="com.company.pingPong.dto.MemberDto">
		INSERT INTO member(member_code, id, password, manager_status, coach_status, name, age, sex, tel, email, addr, birthday, style, grade, note) VALUES((SELECT NVL(MAX(member_code)+1,1)FROM member), #{id}, #{password}, #{manager_status}, #{coach_status}, #{name}, #{age}, #{sex}, #{tel}, #{email}, #{addr}, #{birthday}, #{style}, #{grade}, #{note})
	</insert>
	
	<select id="findMonthAndMemberDao" parameterType="String" resultType="com.company.pingPong.dto.MemberDto">
		SELECT m.member_code, m.name, m.sex, mt.fee_status FROM member m LEFT OUTER JOIN monthmember mt ON m.member_code = mt.member_code WHERE m.name = #{memberName} AND m.approval_status = 1
	</select>
	
	<select id="findLessonAndMemberDao" parameterType="String" resultType="com.company.pingPong.dto.MemberDto">
		SELECT m.member_code, m.name, m.sex FROM member m LEFT OUTER JOIN lesson l ON m.member_code = l.member_code WHERE m.name = #{memberName} AND m.approval_status = 1
	</select>
	
	<select id="getAccountListDao" resultType="com.company.pingPong.dto.MemberDto">
		SELECT m.member_code, m.id, m.manager_status, m.coach_status, m.name, m.sex, m.tel, m.registerday FROM member m
	</select>
	
	<select id="getConfirmListDao" resultType="com.company.pingPong.dto.MemberDto">
		SELECT member_code, id, manager_status, coach_status, registerday FROM member WHERE manager_status = 2 OR coach_status = 2 OR approval_status = 0
	</select>
	
	<update id="managerConfirmDao" parameterType="java.util.Map">
		UPDATE member SET manager_status = ${managerStatus}, approval_status = 1 WHERE member_code = ${memberCode}
	</update>
	
	<update id="coachConfirmDao" parameterType="java.util.Map">
		UPDATE member SET coach_status = ${coachStatus}, approval_status = 1 WHERE member_code = ${memberCode}
	</update>
	
	<update id="memberConfirmDao" parameterType="String">
		UPDATE member SET approval_status = 1 WHERE member_code = #{memberCode}
	</update>
	
	<select id="getFeeList" resultType="com.company.pingPong.dto.FeeDto">
		SELECT fee.*, member.member_code, member.name FROM fee LEFT OUTER JOIN (
		(SELECT lesson.fee_code, member.member_code, member.name FROM lesson LEFT OUTER JOIN member ON lesson.member_code = member.member_code) UNION ALL
		(SELECT monthmember.fee_code, member.member_code, member.name FROM monthmember LEFT OUTER JOIN member ON monthmember.member_code = member.member_code) )member
		ON fee.fee_code = member.fee_code ORDER BY fee_date DESC
	</select>
	
	<select id="getDateFeeList" parameterType="String" resultType="com.company.pingPong.dto.FeeDto">
		SELECT fee.*, member.member_code, member.name FROM fee LEFT OUTER JOIN (
		(SELECT lesson.fee_code, member.member_code, member.name FROM lesson LEFT OUTER JOIN member ON lesson.member_code = member.member_code) UNION ALL
		(SELECT monthmember.fee_code, member.member_code, member.name FROM monthmember LEFT OUTER JOIN member ON monthmember.member_code = member.member_code) )member
		ON fee.fee_code = member.fee_code WHERE to_date(fee_date) = #{searchFeeDate} ORDER BY fee_date DESC
	</select>
	
	<insert id="insertGeneralFeeDao" parameterType="java.util.Map">
		INSERT INTO fee(fee_code, fee_type, fee_amount, note) VALUES((SELECT NVL(MAX(fee_code)+1,1)FROM fee), #{feeType}, #{feeAmount}, #{feeNote})
	</insert>
	
	<insert id="insertOneDayFeeDao" parameterType="java.util.Map">
		INSERT INTO fee(fee_code, fee_type, fee_amount, note) VALUES((SELECT NVL(MAX(fee_code)+1,1)FROM fee), #{feeType}, #{feeAmount}, #{feeNote})
	</insert>
	
	<insert id="insertMonthFeeDao" parameterType="java.util.Map">
		INSERT INTO fee(fee_code, fee_type, fee_amount, note) VALUES((SELECT NVL(MAX(fee_code)+1,1)FROM fee), #{feeType}, #{feeAmount}, #{feeNote})
	</insert>
	
	<select id="getPrevFeeCode" resultType="String">
		SELECT NVL(MAX(fee_code),1)FROM fee
	</select>
	
	<select id="checkMonthMemberDao" parameterType="String" resultType="INTEGER">
		SELECT COUNT(month_code) FROM monthmember WHERE member_code = #{memberCode}
	</select>
	
	<update id="insertMonthMemberDao" parameterType="java.util.Map">
		UPDATE monthmember SET fee_code = #{feeCode} WHERE member_code = #{memberCode}
	</update>
	
	<insert id="insertNewMonthMemberDao" parameterType="java.util.Map">
		INSERT INTO monthmember(month_code, fee_code, member_code, Fee_status) VALUES((SELECT NVL(MAX(month_code)+1,1)FROM monthmember), #{feeCode}, #{memberCode}, 1)
	</insert>
	
	<select id="findLessonAndCoachDao" parameterType="String" resultType="com.company.pingPong.dto.CoachDto">
		SELECT m.member_code, m.name, m.sex, c.coach_code FROM member m LEFT OUTER JOIN coach c ON m.member_code = c.member_code WHERE m.coach_status = 1 AND m.name = #{coachName}
	</select>
	<!-- #{param} is considering database data type
		${param} is non-considering database data type -->
	<!-- <insert id="writeDao">
		INSERT INTO BOARD (MID, MWRITER, MCONTENT) VALUES (BOARD_SEQ.NEXTVAL, #{param1}, #{param2})
	</insert>
	
	<delete id="deleteDao">
		DELETE FROM BOARD WHERE MID = #{param1}
	</delete> -->
</mapper>